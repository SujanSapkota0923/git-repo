name: Terraform CI/CD

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  
jobs:
  terraformlint-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: configure aws   
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: terraform initialize
        id: init
        working-directory: terraform-project2/ec2
        run: terraform init   

      - name: tflint setup
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.52.0

      - name: Init TFLint
        working-directory: terraform-project2/ec2
        run: tflint --init    

      - name: run tflint
        working-directory: terraform-project2/ec2
        id: tflint
        run: |
          tflint -f compact -no-color | tee tflint_op.txt
          echo "exitcode=$?" >> $GITHUB_OUTPUT

      - name: comment terraform TFLint
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            const lint = fs.readFileSync('terraform-project2/ec2/tflint_op.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform TFLint Output for \`ec2-instance\`
              \n\n\`\`\`hcl\n${lint}\n\`\`\``
              });

      - name: terraform format
        working-directory: terraform-project2/ec2
        run: terraform fmt 

      - name: terraform validate
        working-directory: terraform-project2/ec2
        run: terraform validate

  securityscan-ec2:
    runs-on: ubuntu-latest
    needs: terraformlint-ec2
    steps:

      - name: Checkout code
        uses: actions/checkout@v2 

      - name: configure aws   
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: terraform initialize
        id: init
        working-directory: terraform-project2/ec2
        run: terraform init

      - name: tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
        with:
          github_token: ${{ github.token }}

  terraform-plan-ec2:
    runs-on: ubuntu-latest                         
    needs: securityscan-ec2
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: configure aws 
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: terraform initialize
        id: init
        working-directory: terraform-project2/ec2
        run: terraform init

      - name: terraform plan
        id: plan
        working-directory: terraform-project2/ec2
        run: |
          terraform plan -out=tfplan -no-color | tee plan_output.txt
          echo "exitcode=$?" >> $GITHUB_OUTPUT

      - name: comment terraform plan
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform-project2/ec2/plan_output.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan Output for \`ec2-instance\`
              \n\n\`\`\`hcl\n${plan}\n\`\`\``
            });

  artifact-build-ec2:
    runs-on: ubuntu-latest                    
    needs: terraform-plan-ec2
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: release artifact
        working-directory: terraform-project2/ec2
        run: |
          zip -r terraform-project2-ec2.zip . -x '*.git'
          mkdir -p release-artifacts
          mv terraform-project2-ec2.zip release-artifacts/

      - name: Create Semver Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: patch

      - name: Create GitHub Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: ${{ steps.create_tag.outputs.new_tag }}
          prerelease: false
          title: "Release: ${{ steps.create_tag.outputs.new_tag }}"
          files: |
            terraform-project2/ec2/release-artifacts/terraform-project2-ec2.zip     

      - name: Comment on PR with new tag
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            A new tag `${{ steps.create_tag.outputs.new_tag }}` was created and pushed!
            repo-token: ${{ secrets.GITHUB_TOKEN }}

  deploy-ec2:
    runs-on: ubuntu-latest
    needs: artifact-build-ec2

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0    

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Download latest release ZIP
        run: |
          gh release download --repo ${{ github.repository }} --pattern "*.zip" --dir ./release-zip
  

      - name: Unzip artifact
        run: unzip release-zip/*.zip -d terraform-project2-ec2

      - name: Terraform Init
        working-directory: terraform-project2-ec2
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform-project2-ec2
        run: terraform apply -auto-approve

  terraformlint-s3:
    runs-on: ubuntu-latest
    needs: deploy-ec2
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: configure aws   
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: terraform initialize
        id: init
        working-directory: terraform-project2/s3
        run: terraform init   

      - name: tflint setup
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.52.0

      - name: Init TFLint
        working-directory: terraform-project2/s3
        run: tflint --init    

      - name: run tflint
        working-directory: terraform-project2/s3
        id: tflint
        run: |
          tflint -f compact -no-color | tee tflint1_op.txt
          echo "exitcode=$?" >> $GITHUB_OUTPUT

      - name: comment terraform TFLint
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            const lint = fs.readFileSync('terraform-project2/s3/tflint1_op.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform TFLint Output for \`s3-bucket\`
              \n\n\`\`\`hcl\n${lint}\n\`\`\``
              });

      - name: terraform format
        working-directory: terraform-project2/s3
        run: terraform fmt 

      - name: terraform validate
        working-directory: terraform-project2/s3
        run: terraform validate

  securityscan-s3:
    runs-on: ubuntu-latest
    needs: terraformlint-s3
    steps:

      - name: Checkout code
        uses: actions/checkout@v2 

      - name: configure aws   
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: terraform initialize
        id: init
        working-directory: terraform-project2/s3
        run: terraform init

      - name: tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
        with:
          github_token: ${{ github.token }}

  terraform-plan-s3:
    runs-on: ubuntu-latest                         
    needs: securityscan-s3
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: configure aws 
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: terraform initialize
        id: init
        working-directory: terraform-project2/s3
        run: terraform init

      - name: terraform plan
        id: plan
        working-directory: terraform-project2/s3
        run: |
          terraform plan -out=tfplan -no-color | tee plan_output.txt
          echo "exitcode=$?" >> $GITHUB_OUTPUT

      - name: comment terraform plan
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform-project2/s3/plan_output.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan Output for \`s3-bucket\`
              \n\n\`\`\`hcl\n${plan}\n\`\`\``
            });

  artifact-build-s3:
    runs-on: ubuntu-latest                    
    needs: terraform-plan-s3
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: release artifact
        working-directory: terraform-project2/s3
        run: |
          zip -r terraform-project2-s3.zip . -x '*.git'
          mkdir -p release-artifacts
          mv terraform-project2-s3.zip release-artifacts/

      - name: Create Semver Tag
        id: create_tagg
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: patch

      - name: Create GitHub Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: ${{ steps.create_tagg.outputs.new_tag }}
          prerelease: false
          title: "Release: ${{ steps.create_tagg.outputs.new_tag }}"
          files: |
            terraform-project2/s3/release-artifacts/terraform-project2-s3.zip

      - name: Comment on PR with new tag
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            A new tag `${{ steps.create_tagg.outputs.new_tag }}` was created and pushed!
            repo-token: ${{ secrets.GITHUB_TOKEN }}

  deploy-s3:
    runs-on: ubuntu-latest
    needs: artifact-build-s3

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0    

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Download latest release ZIP
        run: |
          gh release download --repo ${{ github.repository }} --pattern "*.zip" --dir ./release-zip
  

      - name: Unzip artifact
        run: unzip release-zip/*.zip -d terraform-project2-s3

      - name: Terraform Init
        working-directory: terraform-project2-s3
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform-project2-s3
        run: terraform apply -auto-approve